<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context      
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
   <!-- 
   <context:annotation-config />
   <bean name="c" class="pojo.Category">
       <property name="name" value="category 1"></property>
   </bean>
   <bean name="p" class="pojo.Product">
       <property name="name" value="product1"></property>
       <property name="categroy" ref="c"></property>
   </bean>
    -->
    
    <!-- 用了这句话就是告诉Spring,所有的bean都在这个pojo包下了；此时可以删去上面的所有对于bean的配置 ，pojo包下的类要用@Component()来声明-->
    <context:component-scan base-package="com.szk.aop.pojo" />
    
    
    <!-- 扫描包:service 和 aspect 定位了业务类和切面类-->
    <context:component-scan base-package="com.szk.aop.service" />
    <context:component-scan base-package="com.szk.aop.aspect" />
    <aop:aspectj-autoproxy proxy-target-class="true"/>          <!-- proxy:代理，找到被注解的切面类，然后自动的进行切面配置 -->
</beans>   